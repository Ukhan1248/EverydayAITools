import { getSession, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";

import React, { useEffect } from "react";
import { buttons, icons } from "../src/buttons";

import { Button } from "reactstrap";

export default function Home() {
  const { data: session } = useSession();

  useEffect(async () => {
    if (session) {
      const { email, image, name } = session?.user || {};

      const options = {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, image, name }),
      };

      await fetch(`http://localhost:3000/api/auth/google-register`, options);
    }
  }, [session]);
  return (
    <div>
      <Head>
        <title>Everyday AI Tools</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h3>Our Collection of AI Text Generation Tools we have to offer!</h3>

      <div className="buttons_grid">
        {/* {buttons.map((button, i) => (
          <Link href={button.url}>
            <a
              style={{
                background: "#079EFB",
                color: "white",
                display: "inline-block",
                padding: "12px 25px",
                textDecoration: "none",
              }}
            >
              {button.text}
            </a>
          </Link>
        ))} */}
        {buttons.map((button, index) => (
          <Link
            key={index + button.text}
            href={button.url}
            className="text-decoration-none"
          >
            <Button color="primary" block className="me-2 main-btn">
              {button.text} {"   "} {icons[button.text]}
            </Button>
          </Link>
        ))}
      </div>
    </div>
  );
}

export async function getServerSideProps({ req }) {
  const session = await getSession({
    req,
  });

  if (!session) {
    return {
      redirect: {
        destination: "/auth/loginformik",
        permanent: false,
      },
    };
  }

  return {
    props: {
      session,
    },
  };
}
